
pipeline {
    agent none
    stages {
        stage('Build and Lint') {
            parallel {
                stage('Python 2.7') {
                    agent {
                        label "ubuntu"
                    }
                    steps {
                        echo "On ubuntu"
                        sh 'python2.7 ./waf-light'
                    }
                }
                stage('Python 3.6') {
                    agent {
                        label "freebsd"
                    }
                    steps {
                        echo "On Freebsd"
                        sh 'python3.6 ./waf-light'
                    }
                }
                stage('Deprecation warnings') {
                    agent {
                        label "ubuntu"
                    }
                    steps {
                        sh '''
cd waflib
find . -iname "*.pyc" -exec rm -f {} \\; || true
! (((PYTHONWARNINGS=all python3.6 -m compileall . > /dev/null) 2>&1 ) 2>&1) | grep -i DeprecationWarning
'''
                    }
                }
                stage('Pyflakes') {
                    agent {
                        label "freebsd"
                    }
                    steps {
                        sh '''
cd waflib
var=`(/usr/local/bin/pyflakes3.py *.py Tools/*.py extras/*.py 2>&1) | egrep "undefined name|invalid syntax|inconsistent use|unindent does not match any outer indentation level" | wc -l`
if [ "0" -eq "$var" ]
then
   /usr/local/bin/pyflakes3.py *.py Tools/*.py extras/*.py || true
else
   # just do it again and fail
   /usr/local/bin/pyflakes3.py *.py Tools/*.py extras/*.py
   exit 1
fi
'''
                    }
                }
                stage('Unit tests') {
                    agent {
                        label "fedora"
                    }
                    steps {
                        sh '''
./waf-light
# cannot use pushd
export PATH=$PATH:$PWD
echo "the path is" $PATH
cd tests/preproc/
../../waf distclean
../../waf configure build
cd ../..
cd tests/install/
../../waf distclean
../../waf configure build
cd ../..
cd tests/general/
../../waf distclean
../../waf configure build
cd ../..
cd tests/init/
../../waf distclean
../../waf configure build
cd ../..
export WAF_TEST_GROUP=waftest
cd tests/install_group/
../../waf distclean
../../waf configure build
'''
                    }
                }
            }
        }
        stage('Integration C builds') {
            parallel {
                stage('Ubuntu/py2.5') {
                    agent {
                        label "ubuntu"
                    }
                    steps {
                        sh '''
./waf-light
cp waf demos/c
cd demos/c
LD_LIBRARY_PATH=/opt/lib /opt/bin/python2.5 ./waf distclean configure clean build
'''
                    }
                }
                stage('Ubuntu/py2.7') {
                    agent {
                        label "ubuntu"
                    }
                    steps {
                        sh '''
./waf-light
cp waf demos/c
cd demos/c
python2.7 ./waf distclean configure clean build
'''
                    }
                }
                stage('Ubuntu/py3') {
                    agent {
                        label "ubuntu"
                    }
                    steps {
                        sh '''
./waf-light
cp waf demos/c
cd demos/c
python3 ./waf distclean configure clean build
'''
                    }
                }
                stage('Openindiana/py2') {
                    agent {
                        label "openindiana"
                    }
                    steps {
                        sh '''
./waf-light
export WAFDIR=`pwd`
export CFLAGS='-std=c99 -D_STDC_C99'
./waf configure clean build --top=$WAFDIR/demos/c
'''
                    }
                }
                stage('OpenBSD/py3') {
                    agent {
                        label "openbsd"
                    }
                    steps {
                        sh '''
python3 ./waf-light
cp waf demos/
cd demos/
python3 ./waf distclean
python3 ./waf configure installcheck
'''
                    }
                }
                stage('FreeBSD/py3') {
                    agent {
                        label "freebsd"
                    }
                    steps {
                        sh '''
./waf-light
/bin/cp waf demos/c/
cd demos/c
python3.6 ./waf distclean configure clean build
'''
                    }
                }
                stage('MacOS/py2') {
                    agent {
                        label "macos"
                    }
                    steps {
                        sh '''
./waf-light
/bin/cp waf demos/c/
cd demos/c
./waf distclean configure clean build
'''
                    }
                }
                stage('Windows/py3') {
                    agent {
                        label "windows"
                    }
                    steps {
                        bat '''
C:/Python34/python.exe waf-light
'''
			bat '''
copy waf demos\\c /Y
cd demos\\c
C:/Python34/python.exe waf distclean
C:/Python34/python.exe waf configure --no-msvc-lazy build -v
'''
                    }
                }
                stage('Windows/IronPython') {
                    agent {
                        label "windows"
                    }
                    steps {
                        bat '''
C:/Python34/python.exe waf-light --zip-type=gz
'''
			bat '''
copy waf demos\\c /Y
cd demos\\c
"C:\\Program Files (x86)\\IronPython 2.7\\ipy64.exe" waf distclean
"C:\\Program Files (x86)\\IronPython 2.7\\ipy64.exe" waf configure build build
'''
                    }
                }
                stage('Msys2/py2') {
                    agent {
                        label "windows"
                    }
                    steps {
                        bat '''
C:/Python34/python.exe waf-light
'''
                        bat '''
copy waf demos\\c /Y
cd demos\\c
set MSYSTEM=MINGW64
set WD=C:\\msys64\\usr\\bin
C:\\msys64\\usr\\bin\\sh --login -c 'exec /bin/bash -c "pwd"'
C:\\msys64\\usr\\bin\\sh --login -c 'exec /bin/bash -c "cd /C/jenkins/workspace/waf-windows10-msys2/demos/c && python waf configure clean build && python waf distclean"'
'''
                    }
                }
                stage('Msys2/py3') {
                    agent {
                        label "windows"
                    }
                    steps {
                        bat '''
C:/Python34/python.exe waf-light
'''
			bat '''
copy waf demos\\c /Y
cd demos\\c
set MSYSTEM=MINGW64
set WD=C:\\msys64\\usr\\bin
C:\\msys64\\usr\\bin\\sh --login -c 'exec /bin/bash -c "cd /C/jenkins/workspace/waf-windows10-msys2/demos/c && python3 waf configure clean build && python3 waf distclean"'
'''
                    }
                }
            }
        }
    }
}
